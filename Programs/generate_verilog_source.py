from pylab import *

def main(generated_sizes,write_file_name,file_name):

    numpy_array = np.array(generated_sizes)
    numpy_array_rounded = np.around(numpy_array,3)
#    for i in range(len(numpy_array_rounded)):
#        if(numpy_array_rounded[i] >= 0.5 and numpy_array_rounded[i] <= 0.75):
#            numpy_array_rounded[i] = 0.5
#    numpy_array_rounded = np.around(numpy_array_rounded,0)
#    for i in range(len(numpy_array_rounded)):
#        if(numpy_array_rounded[i] == 0):
#            numpy_array_rounded[i] = 0.5	    
#    numpy_array_rounded = numpy_array_rounded * 2
    generated_sizes_rounded = list(numpy_array_rounded)
    strings_to_be_written = []
    and_or_buffer_gates = []


    name_dict = {"NAND" : "ND", "NOR" : "NR", "AND" : "ND", "OR" : "NR", "XOR" : "XOR", "XNOR" : "XNR" }

    flag = 0

    with open(write_file_name,'a') as w:
        with open(file_name,'r') as f:
                contents=f.readlines()

                for i in range(len(contents)):
                    if "wire" in contents[i]:
                        wire_end = i
                    if "endmodule" in contents[i]:
                        gate_end = i - 1

#                    w.write(contents[i])

##                    if ";" in contents[i] and flag == 1:
##                        break


##                for i in range(0,len(contents)):
##                    if "wire" in contents[i] and "//" not in contents[i]:
##                        wire_start=i
##
##                    if "endmodule" in contents[i]:
##                        gate_end = i - 1
                    
##                for i in range(wire_start,len(contents)):
##                    if ";" in contents[i]:
##                        wire_end = i;
##                        break
                while ';' not in contents[wire_end]:
                    wire_end = wire_end + 1
                    
                gate_start = wire_end + 1
                
                while contents[gate_start] == '\n':
                    gate_start = gate_start + 1

                while contents[gate_end] == '\n':
                    gate_end = gate_end - 1

                for i in range(gate_start):
                    w.write(contents[i])

                w.write("\n")                
#                gate_end   = len(contents)-3

                for i in range(gate_start,gate_end+1):
                    gate_type = (contents[i].split()[1]).split('_')[0][:-1]
                    if(gate_type == "AND" or gate_type =="OR" or gate_type =="BUFF"):
                        
                        and_or_buffer_gates.append(i)

                if(and_or_buffer_gates):
                    w.write("wire ")
                    
                for i in range(len(and_or_buffer_gates)):
                    w.write("temp{}".format(i))
                    if i == len(and_or_buffer_gates) - 1 :
                        w.write(";")
                    else:
                        w.write(",")
                        if i%9 == 0 and i!=0:
                            w.write("\n")
                            w.write("{:<{}}".format(" ",len("wire ")))

                w.write("\n")
                w.write("\n")
                                    

                j = 0
                extra_wire_count=0
                for i in range(gate_start,gate_end+1):
                    inputs = []
##                    gate_type = (contents[i].split()[1]).split('_')[0][:-1]         Old method of obtaining gate type
                    gate_type = contents[i].split()[0].upper()                     ## New method of obtaining gate type
                    fan_in = len(contents[i].rstrip(';\n').split('(')[1].rstrip(')').split(',')[1:])
                    output_input = contents[i].split('(')[1].strip(');\n').split(',')
                    if re.search(".",str(generated_sizes_rounded[j])):
                            size = re.sub("\.","dot",str(generated_sizes_rounded[j]))
                    if fan_in != 1:
                        name = "{}{}LERMX".format(name_dict[gate_type],fan_in)
                        inputs.append("O")
                        for k in range(fan_in):
                            inputs.append("I{}".format(k+1))
                    else:
                        name="INVLERMX"
                        inputs.append("O")
                        inputs.append("I")    
                    w.write("{}{} g{} (".format(name,size,j))
                    if gate_type == "AND" or gate_type == "OR" or gate_type == "BUFF" :
                        size = generated_sizes_rounded[j + 1]
                        if re.search(".",str(generated_sizes_rounded[j+1])):
                            size = re.sub("\.","dot",str(generated_sizes_rounded[j+1]))
                        string = "{}{} g{} (".format("INVLERMX",size,j+1)
                        string = string + ".{} ({}), .{} ({}));".format("O",output_input[0],"I","temp{}".format(extra_wire_count))
                        strings_to_be_written.append(string)
                        output_input[0] = "temp{}".format(extra_wire_count)
                        j = j + 1
                        extra_wire_count = extra_wire_count + 1

                    string = ""
                    for k in range(fan_in + 1):
                        string = string + ".{} ({}),".format(inputs[k],output_input[k]) + " "
                    string = string[:-2]
                    string = string + ");"
                    strings_to_be_written.append(string)
                    j = j + 1
                    for k in range(len(strings_to_be_written)):
                        w.write(strings_to_be_written.pop())
                        w.write("\n")

                w.write("\n")
                w.write("endmodule")
#generated_sizes = array([1.0000000000949767, 1.0000000000949767, 1.0000000000949767, 1.0000000000949767, 11.577840853879207, 7.453375373093188, 1.00000000151055, 1.0000000000949778, 1.0000000000949767, 1.0000000000949767, 1.0000000000949767, 1.0000000001564895, 1.037849423338742, 1.0000000000949767, 1.0000000000949767, 1.0000000000949767, 1.0000000000949767, 1.0000000000949767, 1.0000000000949767, 1.0000000000949767, 1.0000000000949767, 1.8423549178999301, 1.3402944116276991, 1.0000000000949767, 1.0000000000949767, 1.0000000000949767, 1.0000000000949767, 1.0000000000949767, 1.0000000000949767, 1.0000000000949767, 1.0000000000949767, 1.0000000000949767, 1.0000000000949767, 1.0000000000949767, 1.0000000000949767, 1.0000000000949767, 1.0000000000949767, 1.0000000000949767, 1.0000000000949767, 1.0000000000949767, 1.0000000000949767, 1.0000000000949767, 1.0000000000949767, 1.0000000000949767, 1.0000000000949767, 1.5424093394543958, 1.0000000000949767, 1.0000000000949767, 1.0000000000949767, 1.0000000000949767, 1.0000000000949767, 1.0000000000949767, 1.08015131737243, 2.054797699424655, 3.6613832017741412, 3.1580318459585337, 1.0000000000949767, 1.0000000000949767, 1.0000000000949767, 1.0000000000949767, 1.0000000000949767, 1.0000000000949767, 1.0000000000949767, 1.0000000000949767, 1.0000000000949767, 1.0000000000949767, 1.0000000000949767, 1.0000000000949767, 1.0000000000949767, 1.0000000000949767, 1.0000000000949767, 1.0000000000949767, 1.0000000000949767, 1.0000000000949767, 1.0000000000949767, 1.0000000000949767, 1.0000000000949767, 1.0000000000949767, 1.0000000000949767, 1.0000000000949767, 1.0000000000949767, 1.0000000000949767, 1.0000000000949767, 1.0000000000949767, 1.0000000000949767, 1.0000000000949767, 1.0000000000949767, 1.0000000000949767, 1.0000000000949767, 1.0000000000949767, 1.0000000000949765, 1.0000000000949767, 6.887099334930015, 1.0000000000278102, 1.1932951332629929, 1.0000000000949765, 1.0000000000949762, 1.0000000000949767, 1.0000000000949762, 1.0000000000949767, 1.0000000000949767, 1.6843896960419036, 1.0000000000949767, 1.0000000000949767, 1.0000000000949765, 1.0000000000949765, 1.0000000000949767, 1.0000000000949767, 1.0000000000949767, 1.0000000000949767, 1.0000000000949767, 1.5068036210922444, 3.0439712647773365, 1.0000000000949767, 1.0000000000949767, 1.0000000000949767, 1.0000000000949767, 1.0000000000949767, 1.0000000000949767, 1.0000000000949767, 1.0000000000949767, 1.0000000000949767, 1.0000000000949767, 1.0000000000949767, 1.0000000000949767, 1.0000000000949765, 1.0000000000949767, 9.001218886504594, 1.0000000000949767, 1.0000000000949765, 1.0000000000949767, 1.0000000000949767, 1.0000000000949767, 1.0000000000949767, 1.0000000000949765, 1.0000000000949765, 1.0000000000949762, 1.0000000000949767, 1.0000000000949765, 1.0000000000949765, 1.0000000000949762, 1.0000000000949767, 2.4278522043755144, 1.0000000000949765, 1.0000000000949765, 1.0000000000949762, 1.0000000000949767, 1.0000000000949765, 1.0000000000949765, 1.0000000000949762, 1.0000000000949767, 1.0000000000726192, 1.0000000000949767, 1.0000000000949767, 1.0000000000949767, 1.0000000000949767, 1.0000000000949767, 1.0000000000949767, 1.0000000000949767, 1.0000000000949767, 1.0000000000949767, 1.0000000000949767, 1.0000000000949767, 1.0000000000949767, 1.0000000000949767, 1.0000000000949767, 1.0000000000949765, 1.0000000000949767, 1.0000000000949765, 1.0000000000949767, 1.0000000000227485, 1.2414705445625371, 1.0000000000214022, 1.2414705445625371, 1.3529298498663846, 3.572690666476626, 2.1214539943706288, 1.0000000000949765, 1.0000000000949767, 1.0000000000949765, 1.0000000000949767, 1.0000000000949767, 1.000000000094977, 1.0000000000949767, 1.0000000000949767, 1.0000000000949767, 1.0000000000949767, 1.0000000000949767, 1.0000000000949767, 1.0000000000949767, 1.0000000000949767, 1.0000000000949785, 1.000000000094977, 1.000000000094977, 5.172820029177114, 1.0000000000661082, 1.0000000000949767, 1.0000000000546623, 1.0000000000949767, 1.000000000069389, 1.0000000000994802, 1.0000000000568847, 1.0000000000994769, 1.0000000000710545, 1.0000000001017595, 1.000000000057999, 1.000000000101755, 1.00000000007928, 1.0000000001129454, 1.0000000000633738, 1.0000000001129554, 2.5974985869831246, 1.0000000000310723, 1.0000000000949767, 1.000000000040108, 1.1754431201090576, 1.0000000000419582, 1.2337730568246925, 1.000000000037172, 1.05142254288513, 1.000000000094977, 1.000000000094977, 1.0000000000949765, 1.0000000000949765, 1.0000000000949767, 1.0000000000949765, 1.0000000000949765, 1.0000000000949767, 1.0000000000162705, 1.0000000000949767, 1.0000000000949765, 1.0000000000162705, 1.0000000000949767, 1.0000000000908642, 1.0000000000162705, 1.0000000000949767, 1.0000000000890428, 1.0000000000162705, 1.0000000000949767, 1.0000000000879368, 1.0000000000230378, 1.000000000094977, 1.0000000000178209, 1.0000000001433968, 1.0000000001041838, 1.4634607389928953, 1.4115034317680208, 1.8919222959643207, 1.0131187454842128, 1.5454984814078487, 1.4417105636114416, 1.9448738181912506, 1.0000000000352316, 1.2397248997956802, 1.3327933461053176, 1.7667014140027655, 1.0000000000949765, 1.0000000000949765, 1.0000000000949767, 1.0000000000949765, 1.0000000000949765, 1.0000000000949767, 1.0000000000949765, 1.0000000000949767, 1.0000000000949765, 1.0000000000949767, 1.0000000000949765, 1.0000000000949767, 1.0000000000949765, 1.0000000000949767, 1.0000000000949765, 1.0000000000949767, 1.0000000000949765, 1.0000000000949765, 1.0000000000949765, 1.0000000000949767, 1.0000000000949767, 1.0000000000949765, 1.0000000000949765, 1.0000000000949765, 1.0000000000949765, 1.000000000088661, 1.8713387802843753, 1.9384556512545408, 1.7246225242231525, 1.0000000000949767, 1.0000000000949767, 1.0000000000949765, 1.0000000000949765, 1.0000000000949762, 1.0000000000949767, 1.0000000000949774, 1.0000000001602374, 1.0000000002372351, 1.1242356696490692, 1.144537814434884, 2.807204083673674, 2.919811326557598, 2.569254040089592, 1.0000000000949765, 1.0000000000949765, 1.0000000000949762, 1.0000000000949767, 1.0000000000949765, 1.0000000000949767, 1.0000000000949765, 1.0000000000949767, 1.0000000000949765, 1.0000000000949762, 1.000000000094977, 1.0000000000949762, 1.0000000000949767, 1.000000000080418, 1.0000000000872415, 1.013674421218839, 1.000000000080418, 1.0000000000949767, 1.0000000000749871, 1.0000000000894191, 1.3557876812371958, 1.000000000074987, 1.0000000000949767, 1.000000000060638, 1.0000000001104576, 1.7760734487624608, 1.0000000000606377, 1.0000000000949767, 1.0000000000857934, 1.0000000000694742, 1.2373188241311712, 1.000000000059726, 1.0000000000949767, 1.1367764709836032, 2.3206569182136225, 5.068956612129803, 1.0000000000181224, 1.0000000000949767, 1.4265560744328116, 2.243818046667135, 4.898303888546926, 1.0000000000176081, 1.0000000000949767, 1.764025300202199, 1.5045741479682588, 3.2732062201625, 1.0000000000194202, 1.0000000000949767, 1.0000000000949765, 1.0000000000949765, 1.0000000000949767, 1.0000000000949765, 1.0000000000949774, 1.0000000000949767, 1.0000000000949767, 1.0000000000805849, 1.0000000000949785, 1.0000000000949767, 1.000000000094977, 1.0000000000793716, 1.0000000000949791, 1.0000000000949767, 1.0000000000949776, 1.0000000001196887, 1.1832248091073119, 1.0000000000949767, 1.0000000001358225, 1.0000000000730982, 1.0000000593190217, 1.0000000000949767, 1.7008346480205996, 1.0000000000182643, 1.0000000002366305, 1.0000000000949767, 2.3920188105505447, 1.000000000017615, 1.0000000002366447, 1.0000000000949767, 3.090509611107766, 1.0000000000187201, 1.0000000002366538, 1.0000000000949767, 1.0000000000358242, 1.0000000000177975, 2.7162816374657273, 1.0000000000949765, 1.0000000000949765, 1.0000000000949767, 1.0000000000949765, 1.0000000000949767, 1.000000000094977, 1.000000000094976, 1.0000000000949767, 1.0000000000949765, 1.0000000000949767, 1.0000000000949767, 1.0000000000949758, 1.0000000000949767, 1.0000000000949765, 1.0000000000949767, 1.0000000000949765, 1.000000000061751, 1.0000000000949767, 1.0000000000949762, 1.0000000000949767, 1.119353515109555, 1.0000000000678702, 1.0000000000949767, 1.0000000000744294, 1.0000000000949767, 2.5089536657606657, 1.0000000000766247, 1.0000000000949767, 1.0000000000345484, 1.0000000000949767, 1.0000000000425695, 1.000000000076624, 1.0000000000949767, 1.0000000000359535, 1.0000000000949767, 1.0000000000449574, 1.0000000000730924, 1.0000000000896108, 1.000000000107897, 1.0000000000766236, 1.0000000000949767, 1.0000000000382414, 1.0000000000949767, 1.0000000000220841, 2.7162816374657273, 2.7162816374657273, 1.0000000000793712, 1.000000000124783, 1.0000000002229312, 1.0000000000949767, 1.0000000000949827, 1.0000000000949767, 1.0000000000949827, 1.0000000000949767, 1.0000000000949767, 1.0000000000949767, 1.0000000000949767, 3.262220178733928, 1.0000000000949767, 1.000000000094978, 1.0000000000949767, 1.0000000000949774, 1.0000000000949767, 1.000000000089611, 1.0000000000949767, 1.0000000000065203, 1.0000000000082276, 1.0000000001186715, 1.0000000000730924, 1.0000000000896108, 1.0000000001078968, 1.0000000000730924, 1.0000000000896108, 1.0000000001078968, 1.000000000089611, 1.000000000107897, 3.9826721958633766, 5.479966566841602, 1.0000000000863547, 1.000000000089611, 1.000000000089611, 1.0000000001010254, 1.0000000000099931, 1.0000000000131952, 1.0000000001583245, 1.0000000000863547, 1.0000000001186717, 1.000000000089611, 1.000000000107897, 1.000000000089611, 1.000000000107897, 1.0000000000805132, 1.2960637674513449, 1.462713832949628, 2.132156054671768, 2.1754979916258876, 1.589298462002336, 1.6259525034034616, 1.0000000000791411, 1.0000000000949767, 1.0000000001010254, 1.0000000001010254, 1.0000000000949765, 1.000000000009074, 1.4703122599984664, 1.5258049395200186, 1.0000000000104718, 1.1553315973015357, 1.2936994437845175, 1.0000000000134666, 1.1262373523506288, 1.2553544964648011, 1.0000000000791411, 1.000000000158325, 1.0000000000791676, 1.0000000000805134, 1.0000000000805134, 1.0000000000949767, 1.0000000000114502, 1.0653158202112865, 1.000000000145176, 1.000000000098271, 1.0000000000949767, 1.0000000000949765, 1.0000000000949765, 1.0000000000949765, 1.0000000000888933, 1.0000000000949765, 1.0000000001096485, 1.7449381309798984, 1.0000000002766567, 1.305777828004055, 1.0000000000595057, 1.2557133280544825, 1.0000000000565075, 1.2178737373524675, 1.0000000000678306, 1.0000000000949767, 1.0000000000949767, 1.0000000000949767, 1.0000000000949767, 1.107463427700968, 1.069336914177197, 1.0409283195901937, 1.0000000000949765, 1.0000000001446623, 2.146821980509597, 1.0000000001096485, 1.7449381309798984, 1.0000000001096485, 1.7449381309798984, 1.000000000114924, 1.8454886622278774, 1.000000000046318, 1.0000000000307188, 1.0000000000282505, 1.0000000000958318, 1.4182885524952764, 1.2863252373216882, 1.2007375584179292, 1.01485961237845, 2.746276515949819, 2.17755306687793, 1.8701820891444412, 1.6864025644009721, 3.7346122577136205, 7.556113721381499, 3.1746805083815857, 6.702040283731141, 2.851051860359715, 6.199223237945588])
#write_file_name = "D:/library file/new_verilog_source_gs.txt"
#file_name = "D://Electric/Spice deck/c880a.v"
#main(generated_sizes,write_file_name,file_name)
     #           generated_name.append(name)

     #           if gate_type == "AND" or gate_type == "OR" or gate_type == "BUFF" :
     #               generated_name.append("INVLERMX")
                    



            
